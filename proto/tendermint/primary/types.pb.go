// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tendermint/primary/types.proto

package primary

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Txs struct {
	Txs [][]byte `protobuf:"bytes,1,rep,name=txs,proto3" json:"txs,omitempty"`
}

func (m *Txs) Reset()         { *m = Txs{} }
func (m *Txs) String() string { return proto.CompactTextString(m) }
func (*Txs) ProtoMessage()    {}
func (*Txs) Descriptor() ([]byte, []int) {
	return fileDescriptor_2efa7bb5c5b4d0e8, []int{0}
}
func (m *Txs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Txs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Txs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Txs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Txs.Merge(m, src)
}
func (m *Txs) XXX_Size() int {
	return m.Size()
}
func (m *Txs) XXX_DiscardUnknown() {
	xxx_messageInfo_Txs.DiscardUnknown(m)
}

var xxx_messageInfo_Txs proto.InternalMessageInfo

func (m *Txs) GetTxs() [][]byte {
	if m != nil {
		return m.Txs
	}
	return nil
}

type PrimaryDagHeader struct {
	DagRound      int64    `protobuf:"varint,1,opt,name=dag_round,json=dagRound,proto3" json:"dag_round,omitempty"`
	AuthorAddress []byte   `protobuf:"bytes,2,opt,name=author_address,json=authorAddress,proto3" json:"author_address,omitempty"`
	Parents       [][]byte `protobuf:"bytes,3,rep,name=parents,proto3" json:"parents,omitempty"`
	BatchDigests  [][]byte `protobuf:"bytes,4,rep,name=batch_digests,json=batchDigests,proto3" json:"batch_digests,omitempty"`
}

func (m *PrimaryDagHeader) Reset()         { *m = PrimaryDagHeader{} }
func (m *PrimaryDagHeader) String() string { return proto.CompactTextString(m) }
func (*PrimaryDagHeader) ProtoMessage()    {}
func (*PrimaryDagHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_2efa7bb5c5b4d0e8, []int{1}
}
func (m *PrimaryDagHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrimaryDagHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrimaryDagHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrimaryDagHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrimaryDagHeader.Merge(m, src)
}
func (m *PrimaryDagHeader) XXX_Size() int {
	return m.Size()
}
func (m *PrimaryDagHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_PrimaryDagHeader.DiscardUnknown(m)
}

var xxx_messageInfo_PrimaryDagHeader proto.InternalMessageInfo

func (m *PrimaryDagHeader) GetDagRound() int64 {
	if m != nil {
		return m.DagRound
	}
	return 0
}

func (m *PrimaryDagHeader) GetAuthorAddress() []byte {
	if m != nil {
		return m.AuthorAddress
	}
	return nil
}

func (m *PrimaryDagHeader) GetParents() [][]byte {
	if m != nil {
		return m.Parents
	}
	return nil
}

func (m *PrimaryDagHeader) GetBatchDigests() [][]byte {
	if m != nil {
		return m.BatchDigests
	}
	return nil
}

type PrimaryDagVote struct {
	DagHeaderHash []byte `protobuf:"bytes,1,opt,name=dagHeaderHash,proto3" json:"dagHeaderHash,omitempty"`
	Round         int64  `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
	OriginAddress []byte `protobuf:"bytes,3,opt,name=origin_address,json=originAddress,proto3" json:"origin_address,omitempty"`
	VoterAddress  []byte `protobuf:"bytes,4,opt,name=voter_address,json=voterAddress,proto3" json:"voter_address,omitempty"`
	Signature     []byte `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *PrimaryDagVote) Reset()         { *m = PrimaryDagVote{} }
func (m *PrimaryDagVote) String() string { return proto.CompactTextString(m) }
func (*PrimaryDagVote) ProtoMessage()    {}
func (*PrimaryDagVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_2efa7bb5c5b4d0e8, []int{2}
}
func (m *PrimaryDagVote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrimaryDagVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrimaryDagVote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrimaryDagVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrimaryDagVote.Merge(m, src)
}
func (m *PrimaryDagVote) XXX_Size() int {
	return m.Size()
}
func (m *PrimaryDagVote) XXX_DiscardUnknown() {
	xxx_messageInfo_PrimaryDagVote.DiscardUnknown(m)
}

var xxx_messageInfo_PrimaryDagVote proto.InternalMessageInfo

func (m *PrimaryDagVote) GetDagHeaderHash() []byte {
	if m != nil {
		return m.DagHeaderHash
	}
	return nil
}

func (m *PrimaryDagVote) GetRound() int64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *PrimaryDagVote) GetOriginAddress() []byte {
	if m != nil {
		return m.OriginAddress
	}
	return nil
}

func (m *PrimaryDagVote) GetVoterAddress() []byte {
	if m != nil {
		return m.VoterAddress
	}
	return nil
}

func (m *PrimaryDagVote) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type DagVote struct {
	ValidatorAddress []byte `protobuf:"bytes,1,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	Signature        []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *DagVote) Reset()         { *m = DagVote{} }
func (m *DagVote) String() string { return proto.CompactTextString(m) }
func (*DagVote) ProtoMessage()    {}
func (*DagVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_2efa7bb5c5b4d0e8, []int{3}
}
func (m *DagVote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DagVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DagVote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DagVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DagVote.Merge(m, src)
}
func (m *DagVote) XXX_Size() int {
	return m.Size()
}
func (m *DagVote) XXX_DiscardUnknown() {
	xxx_messageInfo_DagVote.DiscardUnknown(m)
}

var xxx_messageInfo_DagVote proto.InternalMessageInfo

func (m *DagVote) GetValidatorAddress() []byte {
	if m != nil {
		return m.ValidatorAddress
	}
	return nil
}

func (m *DagVote) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type PrimaryDagCert struct {
	DagHeaderHash []byte            `protobuf:"bytes,1,opt,name=dagHeaderHash,proto3" json:"dagHeaderHash,omitempty"`
	DagHeader     *PrimaryDagHeader `protobuf:"bytes,2,opt,name=dag_header,json=dagHeader,proto3" json:"dag_header,omitempty"`
	Votes         []*DagVote        `protobuf:"bytes,3,rep,name=votes,proto3" json:"votes,omitempty"`
}

func (m *PrimaryDagCert) Reset()         { *m = PrimaryDagCert{} }
func (m *PrimaryDagCert) String() string { return proto.CompactTextString(m) }
func (*PrimaryDagCert) ProtoMessage()    {}
func (*PrimaryDagCert) Descriptor() ([]byte, []int) {
	return fileDescriptor_2efa7bb5c5b4d0e8, []int{4}
}
func (m *PrimaryDagCert) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrimaryDagCert) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrimaryDagCert.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrimaryDagCert) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrimaryDagCert.Merge(m, src)
}
func (m *PrimaryDagCert) XXX_Size() int {
	return m.Size()
}
func (m *PrimaryDagCert) XXX_DiscardUnknown() {
	xxx_messageInfo_PrimaryDagCert.DiscardUnknown(m)
}

var xxx_messageInfo_PrimaryDagCert proto.InternalMessageInfo

func (m *PrimaryDagCert) GetDagHeaderHash() []byte {
	if m != nil {
		return m.DagHeaderHash
	}
	return nil
}

func (m *PrimaryDagCert) GetDagHeader() *PrimaryDagHeader {
	if m != nil {
		return m.DagHeader
	}
	return nil
}

func (m *PrimaryDagCert) GetVotes() []*DagVote {
	if m != nil {
		return m.Votes
	}
	return nil
}

// if dag_round is 0, it means the request is for the latest dag round
type PrimaryParentReq struct {
	DagRound int64 `protobuf:"varint,1,opt,name=dag_round,json=dagRound,proto3" json:"dag_round,omitempty"`
}

func (m *PrimaryParentReq) Reset()         { *m = PrimaryParentReq{} }
func (m *PrimaryParentReq) String() string { return proto.CompactTextString(m) }
func (*PrimaryParentReq) ProtoMessage()    {}
func (*PrimaryParentReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_2efa7bb5c5b4d0e8, []int{5}
}
func (m *PrimaryParentReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrimaryParentReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrimaryParentReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrimaryParentReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrimaryParentReq.Merge(m, src)
}
func (m *PrimaryParentReq) XXX_Size() int {
	return m.Size()
}
func (m *PrimaryParentReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PrimaryParentReq.DiscardUnknown(m)
}

var xxx_messageInfo_PrimaryParentReq proto.InternalMessageInfo

func (m *PrimaryParentReq) GetDagRound() int64 {
	if m != nil {
		return m.DagRound
	}
	return 0
}

// origin_address, cert_digest are the same indexed data
type PrimaryParentResp struct {
	DagRound      int64    `protobuf:"varint,1,opt,name=dag_round,json=dagRound,proto3" json:"dag_round,omitempty"`
	OriginAddress [][]byte `protobuf:"bytes,2,rep,name=origin_address,json=originAddress,proto3" json:"origin_address,omitempty"`
	CertDigest    [][]byte `protobuf:"bytes,3,rep,name=cert_digest,json=certDigest,proto3" json:"cert_digest,omitempty"`
}

func (m *PrimaryParentResp) Reset()         { *m = PrimaryParentResp{} }
func (m *PrimaryParentResp) String() string { return proto.CompactTextString(m) }
func (*PrimaryParentResp) ProtoMessage()    {}
func (*PrimaryParentResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_2efa7bb5c5b4d0e8, []int{6}
}
func (m *PrimaryParentResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrimaryParentResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrimaryParentResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrimaryParentResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrimaryParentResp.Merge(m, src)
}
func (m *PrimaryParentResp) XXX_Size() int {
	return m.Size()
}
func (m *PrimaryParentResp) XXX_DiscardUnknown() {
	xxx_messageInfo_PrimaryParentResp.DiscardUnknown(m)
}

var xxx_messageInfo_PrimaryParentResp proto.InternalMessageInfo

func (m *PrimaryParentResp) GetDagRound() int64 {
	if m != nil {
		return m.DagRound
	}
	return 0
}

func (m *PrimaryParentResp) GetOriginAddress() [][]byte {
	if m != nil {
		return m.OriginAddress
	}
	return nil
}

func (m *PrimaryParentResp) GetCertDigest() [][]byte {
	if m != nil {
		return m.CertDigest
	}
	return nil
}

// tmp use
type PrimaryLeaderNotify struct {
	FromDagRound  int64  `protobuf:"varint,1,opt,name=from_dag_round,json=fromDagRound,proto3" json:"from_dag_round,omitempty"`
	LeaderAddress []byte `protobuf:"bytes,2,opt,name=leader_address,json=leaderAddress,proto3" json:"leader_address,omitempty"`
}

func (m *PrimaryLeaderNotify) Reset()         { *m = PrimaryLeaderNotify{} }
func (m *PrimaryLeaderNotify) String() string { return proto.CompactTextString(m) }
func (*PrimaryLeaderNotify) ProtoMessage()    {}
func (*PrimaryLeaderNotify) Descriptor() ([]byte, []int) {
	return fileDescriptor_2efa7bb5c5b4d0e8, []int{7}
}
func (m *PrimaryLeaderNotify) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrimaryLeaderNotify) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrimaryLeaderNotify.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrimaryLeaderNotify) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrimaryLeaderNotify.Merge(m, src)
}
func (m *PrimaryLeaderNotify) XXX_Size() int {
	return m.Size()
}
func (m *PrimaryLeaderNotify) XXX_DiscardUnknown() {
	xxx_messageInfo_PrimaryLeaderNotify.DiscardUnknown(m)
}

var xxx_messageInfo_PrimaryLeaderNotify proto.InternalMessageInfo

func (m *PrimaryLeaderNotify) GetFromDagRound() int64 {
	if m != nil {
		return m.FromDagRound
	}
	return 0
}

func (m *PrimaryLeaderNotify) GetLeaderAddress() []byte {
	if m != nil {
		return m.LeaderAddress
	}
	return nil
}

type Message struct {
	// Types that are valid to be assigned to Sum:
	//
	//	*Message_PrimaryDagHeader
	//	*Message_PrimaryDagVote
	//	*Message_PrimaryDagCert
	//	*Message_PrimaryParentReq
	//	*Message_PrimaryParentResp
	//	*Message_PrimaryLeaderNotify
	Sum isMessage_Sum `protobuf_oneof:"sum"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_2efa7bb5c5b4d0e8, []int{8}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Message.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return m.Size()
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

type isMessage_Sum interface {
	isMessage_Sum()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Message_PrimaryDagHeader struct {
	PrimaryDagHeader *PrimaryDagHeader `protobuf:"bytes,1,opt,name=primary_dag_header,json=primaryDagHeader,proto3,oneof" json:"primary_dag_header,omitempty"`
}
type Message_PrimaryDagVote struct {
	PrimaryDagVote *PrimaryDagVote `protobuf:"bytes,2,opt,name=primary_dag_vote,json=primaryDagVote,proto3,oneof" json:"primary_dag_vote,omitempty"`
}
type Message_PrimaryDagCert struct {
	PrimaryDagCert *PrimaryDagCert `protobuf:"bytes,3,opt,name=primary_dag_cert,json=primaryDagCert,proto3,oneof" json:"primary_dag_cert,omitempty"`
}
type Message_PrimaryParentReq struct {
	PrimaryParentReq *PrimaryParentReq `protobuf:"bytes,4,opt,name=primary_parent_req,json=primaryParentReq,proto3,oneof" json:"primary_parent_req,omitempty"`
}
type Message_PrimaryParentResp struct {
	PrimaryParentResp *PrimaryParentResp `protobuf:"bytes,5,opt,name=primary_parent_resp,json=primaryParentResp,proto3,oneof" json:"primary_parent_resp,omitempty"`
}
type Message_PrimaryLeaderNotify struct {
	PrimaryLeaderNotify *PrimaryLeaderNotify `protobuf:"bytes,6,opt,name=primary_leader_notify,json=primaryLeaderNotify,proto3,oneof" json:"primary_leader_notify,omitempty"`
}

func (*Message_PrimaryDagHeader) isMessage_Sum()    {}
func (*Message_PrimaryDagVote) isMessage_Sum()      {}
func (*Message_PrimaryDagCert) isMessage_Sum()      {}
func (*Message_PrimaryParentReq) isMessage_Sum()    {}
func (*Message_PrimaryParentResp) isMessage_Sum()   {}
func (*Message_PrimaryLeaderNotify) isMessage_Sum() {}

func (m *Message) GetSum() isMessage_Sum {
	if m != nil {
		return m.Sum
	}
	return nil
}

func (m *Message) GetPrimaryDagHeader() *PrimaryDagHeader {
	if x, ok := m.GetSum().(*Message_PrimaryDagHeader); ok {
		return x.PrimaryDagHeader
	}
	return nil
}

func (m *Message) GetPrimaryDagVote() *PrimaryDagVote {
	if x, ok := m.GetSum().(*Message_PrimaryDagVote); ok {
		return x.PrimaryDagVote
	}
	return nil
}

func (m *Message) GetPrimaryDagCert() *PrimaryDagCert {
	if x, ok := m.GetSum().(*Message_PrimaryDagCert); ok {
		return x.PrimaryDagCert
	}
	return nil
}

func (m *Message) GetPrimaryParentReq() *PrimaryParentReq {
	if x, ok := m.GetSum().(*Message_PrimaryParentReq); ok {
		return x.PrimaryParentReq
	}
	return nil
}

func (m *Message) GetPrimaryParentResp() *PrimaryParentResp {
	if x, ok := m.GetSum().(*Message_PrimaryParentResp); ok {
		return x.PrimaryParentResp
	}
	return nil
}

func (m *Message) GetPrimaryLeaderNotify() *PrimaryLeaderNotify {
	if x, ok := m.GetSum().(*Message_PrimaryLeaderNotify); ok {
		return x.PrimaryLeaderNotify
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Message) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Message_PrimaryDagHeader)(nil),
		(*Message_PrimaryDagVote)(nil),
		(*Message_PrimaryDagCert)(nil),
		(*Message_PrimaryParentReq)(nil),
		(*Message_PrimaryParentResp)(nil),
		(*Message_PrimaryLeaderNotify)(nil),
	}
}

func init() {
	proto.RegisterType((*Txs)(nil), "tendermint.primary.Txs")
	proto.RegisterType((*PrimaryDagHeader)(nil), "tendermint.primary.PrimaryDagHeader")
	proto.RegisterType((*PrimaryDagVote)(nil), "tendermint.primary.PrimaryDagVote")
	proto.RegisterType((*DagVote)(nil), "tendermint.primary.DagVote")
	proto.RegisterType((*PrimaryDagCert)(nil), "tendermint.primary.PrimaryDagCert")
	proto.RegisterType((*PrimaryParentReq)(nil), "tendermint.primary.PrimaryParentReq")
	proto.RegisterType((*PrimaryParentResp)(nil), "tendermint.primary.PrimaryParentResp")
	proto.RegisterType((*PrimaryLeaderNotify)(nil), "tendermint.primary.PrimaryLeaderNotify")
	proto.RegisterType((*Message)(nil), "tendermint.primary.Message")
}

func init() { proto.RegisterFile("tendermint/primary/types.proto", fileDescriptor_2efa7bb5c5b4d0e8) }

var fileDescriptor_2efa7bb5c5b4d0e8 = []byte{
	// 653 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0xcb, 0x4e, 0xdb, 0x40,
	0x14, 0xb5, 0x63, 0x02, 0xe5, 0xe6, 0xa1, 0x30, 0x50, 0xd5, 0x2a, 0x95, 0x8b, 0x0c, 0xa8, 0x48,
	0x95, 0x12, 0x95, 0xaa, 0x1f, 0x50, 0x60, 0x91, 0x45, 0x4b, 0xd1, 0x08, 0xb5, 0x52, 0xa5, 0x2a,
	0x9a, 0xc4, 0x83, 0x63, 0x09, 0x7b, 0xcc, 0xcc, 0x04, 0xc1, 0x5f, 0x74, 0xd1, 0xfe, 0x46, 0x97,
	0xfd, 0x86, 0x2e, 0x59, 0x76, 0x59, 0xc1, 0x8f, 0x54, 0x33, 0x63, 0xc7, 0x8e, 0x83, 0x02, 0x3b,
	0xfb, 0xdc, 0x99, 0x93, 0x73, 0xef, 0x39, 0xd7, 0x01, 0x4f, 0xd2, 0x24, 0xa0, 0x3c, 0x8e, 0x12,
	0xd9, 0x4b, 0x79, 0x14, 0x13, 0x7e, 0xdd, 0x93, 0xd7, 0x29, 0x15, 0xdd, 0x94, 0x33, 0xc9, 0x10,
	0x2a, 0xea, 0xdd, 0xac, 0xfe, 0x7c, 0x23, 0x64, 0x21, 0xd3, 0xe5, 0x9e, 0x7a, 0x32, 0x27, 0xfd,
	0x67, 0xe0, 0x9c, 0x5e, 0x09, 0xd4, 0x01, 0x47, 0x5e, 0x09, 0xd7, 0xde, 0x72, 0xf6, 0x9a, 0x58,
	0x3d, 0xfa, 0x3f, 0x6d, 0xe8, 0x9c, 0x98, 0xab, 0x47, 0x24, 0xec, 0x53, 0x12, 0x50, 0x8e, 0x36,
	0x61, 0x35, 0x20, 0xe1, 0x80, 0xb3, 0x49, 0x12, 0xb8, 0xf6, 0x96, 0xbd, 0xe7, 0xe0, 0x27, 0x01,
	0x09, 0xb1, 0x7a, 0x47, 0xbb, 0xd0, 0x26, 0x13, 0x39, 0x66, 0x7c, 0x40, 0x82, 0x80, 0x53, 0x21,
	0xdc, 0xda, 0x96, 0xbd, 0xd7, 0xc4, 0x2d, 0x83, 0xbe, 0x37, 0x20, 0x72, 0x61, 0x25, 0x25, 0x9c,
	0x26, 0x52, 0xb8, 0x8e, 0xfe, 0xb9, 0xfc, 0x15, 0x6d, 0x43, 0x6b, 0x48, 0xe4, 0x68, 0x3c, 0x08,
	0xa2, 0x90, 0x0a, 0x29, 0xdc, 0x25, 0x5d, 0x6f, 0x6a, 0xf0, 0xc8, 0x60, 0xfe, 0x6f, 0x1b, 0xda,
	0x85, 0xae, 0xcf, 0x4c, 0x52, 0xb4, 0x03, 0xad, 0x20, 0x97, 0xd8, 0x27, 0x62, 0xac, 0x95, 0x35,
	0xf1, 0x2c, 0x88, 0x36, 0xa0, 0x6e, 0x74, 0xd7, 0xb4, 0x6e, 0xf3, 0xa2, 0x44, 0x33, 0x1e, 0x85,
	0x51, 0x32, 0x15, 0xed, 0x98, 0xcb, 0x06, 0xcd, 0x45, 0x6f, 0x43, 0xeb, 0x92, 0x49, 0x5a, 0xb4,
	0xb6, 0xa4, 0x4f, 0x35, 0x35, 0x98, 0x1f, 0x7a, 0x01, 0xab, 0x22, 0x0a, 0x13, 0x22, 0x27, 0x9c,
	0xba, 0x75, 0x7d, 0xa0, 0x00, 0xfc, 0x53, 0x58, 0xc9, 0x05, 0xbf, 0x86, 0xb5, 0x4b, 0x72, 0x1e,
	0x05, 0x44, 0x96, 0x86, 0x65, 0x44, 0x77, 0xa6, 0x85, 0x7b, 0x59, 0x6b, 0x55, 0xd6, 0x5f, 0x33,
	0xe3, 0x38, 0xa4, 0x5c, 0x3e, 0x72, 0x1c, 0x87, 0x00, 0xca, 0xca, 0xb1, 0x46, 0x34, 0x6f, 0x63,
	0x7f, 0xa7, 0x3b, 0x9f, 0x9b, 0x6e, 0x35, 0x04, 0x78, 0x75, 0x4a, 0x84, 0xde, 0x40, 0x5d, 0x4d,
	0xc0, 0x38, 0xd9, 0xd8, 0xdf, 0xbc, 0xef, 0x7e, 0xd6, 0x34, 0x36, 0x27, 0xfd, 0xde, 0x34, 0x56,
	0x27, 0xda, 0x76, 0x4c, 0x2f, 0x16, 0xc6, 0xca, 0xbf, 0x82, 0xb5, 0xca, 0x05, 0x91, 0x3e, 0x18,
	0xc4, 0x8a, 0xa7, 0x35, 0x1d, 0xa4, 0x8a, 0xa7, 0x2f, 0xa1, 0x31, 0xa2, 0x5c, 0x66, 0x69, 0xcb,
	0xc2, 0x08, 0x0a, 0x32, 0x59, 0xf3, 0x87, 0xb0, 0x9e, 0xfd, 0xf2, 0x07, 0xdd, 0xee, 0x31, 0x93,
	0xd1, 0xd9, 0x35, 0xda, 0x81, 0xf6, 0x19, 0x67, 0xf1, 0xa0, 0x2a, 0xa0, 0xa9, 0xd0, 0xa3, 0x92,
	0x88, 0x73, 0x7d, 0xab, 0xba, 0x0d, 0x06, 0xcd, 0x44, 0xf8, 0x3f, 0x96, 0x60, 0xe5, 0x23, 0x15,
	0x82, 0x84, 0x14, 0x9d, 0x02, 0xca, 0x86, 0x36, 0x28, 0x59, 0x63, 0x3f, 0xde, 0x9a, 0xbe, 0x85,
	0x3b, 0x69, 0x75, 0x67, 0x8f, 0xa1, 0x53, 0x66, 0x55, 0x2e, 0x64, 0x76, 0xfb, 0x8b, 0x39, 0x95,
	0x6b, 0x7d, 0x0b, 0xb7, 0xd3, 0xd9, 0x6d, 0xab, 0xf0, 0xa9, 0x79, 0xe9, 0x9d, 0x79, 0x90, 0x4f,
	0x85, 0x73, 0x96, 0x4f, 0xc7, 0xb5, 0xd4, 0xb5, 0xf9, 0x10, 0x0c, 0x38, 0xbd, 0xd0, 0xfb, 0xb5,
	0xb8, 0xeb, 0x69, 0x7c, 0x4a, 0x5d, 0x17, 0x91, 0xfa, 0x02, 0xeb, 0x73, 0xac, 0x22, 0xd5, 0x5b,
	0xd9, 0xd8, 0xdf, 0x7d, 0x04, 0xad, 0x48, 0xfb, 0x16, 0x5e, 0x4b, 0xe7, 0x92, 0xf7, 0x0d, 0x9e,
	0xe6, 0xc4, 0x99, 0xbf, 0x89, 0x8e, 0x85, 0xbb, 0xac, 0xa9, 0x5f, 0x2d, 0xa0, 0x2e, 0xa7, 0xa8,
	0x6f, 0xe1, 0x5c, 0x60, 0x19, 0x3e, 0xa8, 0x83, 0x23, 0x26, 0xf1, 0xc1, 0xa7, 0x3f, 0xb7, 0x9e,
	0x7d, 0x73, 0xeb, 0xd9, 0xff, 0x6e, 0x3d, 0xfb, 0xfb, 0x9d, 0x67, 0xdd, 0xdc, 0x79, 0xd6, 0xdf,
	0x3b, 0xcf, 0xfa, 0xfa, 0x2e, 0x8c, 0xe4, 0x78, 0x32, 0xec, 0x8e, 0x58, 0xdc, 0x1b, 0xb1, 0x98,
	0xca, 0xe1, 0x99, 0x2c, 0x1e, 0xcc, 0xf7, 0x7d, 0xfe, 0xdf, 0x61, 0xb8, 0xac, 0x2b, 0x6f, 0xff,
	0x07, 0x00, 0x00, 0xff, 0xff, 0xb5, 0x3e, 0x86, 0xc6, 0x3a, 0x06, 0x00, 0x00,
}

func (m *Txs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Txs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Txs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Txs) > 0 {
		for iNdEx := len(m.Txs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Txs[iNdEx])
			copy(dAtA[i:], m.Txs[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Txs[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PrimaryDagHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrimaryDagHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrimaryDagHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BatchDigests) > 0 {
		for iNdEx := len(m.BatchDigests) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.BatchDigests[iNdEx])
			copy(dAtA[i:], m.BatchDigests[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.BatchDigests[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Parents) > 0 {
		for iNdEx := len(m.Parents) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Parents[iNdEx])
			copy(dAtA[i:], m.Parents[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Parents[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.AuthorAddress) > 0 {
		i -= len(m.AuthorAddress)
		copy(dAtA[i:], m.AuthorAddress)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AuthorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.DagRound != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.DagRound))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PrimaryDagVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrimaryDagVote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrimaryDagVote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.VoterAddress) > 0 {
		i -= len(m.VoterAddress)
		copy(dAtA[i:], m.VoterAddress)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.VoterAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.OriginAddress) > 0 {
		i -= len(m.OriginAddress)
		copy(dAtA[i:], m.OriginAddress)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.OriginAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Round != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Round))
		i--
		dAtA[i] = 0x10
	}
	if len(m.DagHeaderHash) > 0 {
		i -= len(m.DagHeaderHash)
		copy(dAtA[i:], m.DagHeaderHash)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.DagHeaderHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DagVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DagVote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DagVote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PrimaryDagCert) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrimaryDagCert) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrimaryDagCert) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Votes) > 0 {
		for iNdEx := len(m.Votes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Votes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.DagHeader != nil {
		{
			size, err := m.DagHeader.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.DagHeaderHash) > 0 {
		i -= len(m.DagHeaderHash)
		copy(dAtA[i:], m.DagHeaderHash)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.DagHeaderHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PrimaryParentReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrimaryParentReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrimaryParentReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DagRound != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.DagRound))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PrimaryParentResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrimaryParentResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrimaryParentResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CertDigest) > 0 {
		for iNdEx := len(m.CertDigest) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CertDigest[iNdEx])
			copy(dAtA[i:], m.CertDigest[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.CertDigest[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.OriginAddress) > 0 {
		for iNdEx := len(m.OriginAddress) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.OriginAddress[iNdEx])
			copy(dAtA[i:], m.OriginAddress[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.OriginAddress[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.DagRound != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.DagRound))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PrimaryLeaderNotify) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrimaryLeaderNotify) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrimaryLeaderNotify) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LeaderAddress) > 0 {
		i -= len(m.LeaderAddress)
		copy(dAtA[i:], m.LeaderAddress)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.LeaderAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.FromDagRound != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.FromDagRound))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sum != nil {
		{
			size := m.Sum.Size()
			i -= size
			if _, err := m.Sum.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Message_PrimaryDagHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_PrimaryDagHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PrimaryDagHeader != nil {
		{
			size, err := m.PrimaryDagHeader.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *Message_PrimaryDagVote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_PrimaryDagVote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PrimaryDagVote != nil {
		{
			size, err := m.PrimaryDagVote.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *Message_PrimaryDagCert) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_PrimaryDagCert) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PrimaryDagCert != nil {
		{
			size, err := m.PrimaryDagCert.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *Message_PrimaryParentReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_PrimaryParentReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PrimaryParentReq != nil {
		{
			size, err := m.PrimaryParentReq.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *Message_PrimaryParentResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_PrimaryParentResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PrimaryParentResp != nil {
		{
			size, err := m.PrimaryParentResp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *Message_PrimaryLeaderNotify) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_PrimaryLeaderNotify) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PrimaryLeaderNotify != nil {
		{
			size, err := m.PrimaryLeaderNotify.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Txs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Txs) > 0 {
		for _, b := range m.Txs {
			l = len(b)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *PrimaryDagHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DagRound != 0 {
		n += 1 + sovTypes(uint64(m.DagRound))
	}
	l = len(m.AuthorAddress)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Parents) > 0 {
		for _, b := range m.Parents {
			l = len(b)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.BatchDigests) > 0 {
		for _, b := range m.BatchDigests {
			l = len(b)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *PrimaryDagVote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DagHeaderHash)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Round != 0 {
		n += 1 + sovTypes(uint64(m.Round))
	}
	l = len(m.OriginAddress)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.VoterAddress)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *DagVote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *PrimaryDagCert) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DagHeaderHash)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.DagHeader != nil {
		l = m.DagHeader.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Votes) > 0 {
		for _, e := range m.Votes {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *PrimaryParentReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DagRound != 0 {
		n += 1 + sovTypes(uint64(m.DagRound))
	}
	return n
}

func (m *PrimaryParentResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DagRound != 0 {
		n += 1 + sovTypes(uint64(m.DagRound))
	}
	if len(m.OriginAddress) > 0 {
		for _, b := range m.OriginAddress {
			l = len(b)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.CertDigest) > 0 {
		for _, b := range m.CertDigest {
			l = len(b)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *PrimaryLeaderNotify) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FromDagRound != 0 {
		n += 1 + sovTypes(uint64(m.FromDagRound))
	}
	l = len(m.LeaderAddress)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *Message) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sum != nil {
		n += m.Sum.Size()
	}
	return n
}

func (m *Message_PrimaryDagHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PrimaryDagHeader != nil {
		l = m.PrimaryDagHeader.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *Message_PrimaryDagVote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PrimaryDagVote != nil {
		l = m.PrimaryDagVote.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *Message_PrimaryDagCert) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PrimaryDagCert != nil {
		l = m.PrimaryDagCert.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *Message_PrimaryParentReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PrimaryParentReq != nil {
		l = m.PrimaryParentReq.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *Message_PrimaryParentResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PrimaryParentResp != nil {
		l = m.PrimaryParentResp.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *Message_PrimaryLeaderNotify) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PrimaryLeaderNotify != nil {
		l = m.PrimaryLeaderNotify.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Txs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Txs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Txs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txs = append(m.Txs, make([]byte, postIndex-iNdEx))
			copy(m.Txs[len(m.Txs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrimaryDagHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrimaryDagHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrimaryDagHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DagRound", wireType)
			}
			m.DagRound = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DagRound |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthorAddress = append(m.AuthorAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.AuthorAddress == nil {
				m.AuthorAddress = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parents", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parents = append(m.Parents, make([]byte, postIndex-iNdEx))
			copy(m.Parents[len(m.Parents)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchDigests", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BatchDigests = append(m.BatchDigests, make([]byte, postIndex-iNdEx))
			copy(m.BatchDigests[len(m.BatchDigests)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrimaryDagVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrimaryDagVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrimaryDagVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DagHeaderHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DagHeaderHash = append(m.DagHeaderHash[:0], dAtA[iNdEx:postIndex]...)
			if m.DagHeaderHash == nil {
				m.DagHeaderHash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginAddress = append(m.OriginAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.OriginAddress == nil {
				m.OriginAddress = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoterAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoterAddress = append(m.VoterAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.VoterAddress == nil {
				m.VoterAddress = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DagVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DagVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DagVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = append(m.ValidatorAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.ValidatorAddress == nil {
				m.ValidatorAddress = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrimaryDagCert) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrimaryDagCert: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrimaryDagCert: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DagHeaderHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DagHeaderHash = append(m.DagHeaderHash[:0], dAtA[iNdEx:postIndex]...)
			if m.DagHeaderHash == nil {
				m.DagHeaderHash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DagHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DagHeader == nil {
				m.DagHeader = &PrimaryDagHeader{}
			}
			if err := m.DagHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Votes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Votes = append(m.Votes, &DagVote{})
			if err := m.Votes[len(m.Votes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrimaryParentReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrimaryParentReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrimaryParentReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DagRound", wireType)
			}
			m.DagRound = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DagRound |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrimaryParentResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrimaryParentResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrimaryParentResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DagRound", wireType)
			}
			m.DagRound = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DagRound |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginAddress = append(m.OriginAddress, make([]byte, postIndex-iNdEx))
			copy(m.OriginAddress[len(m.OriginAddress)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertDigest", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CertDigest = append(m.CertDigest, make([]byte, postIndex-iNdEx))
			copy(m.CertDigest[len(m.CertDigest)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrimaryLeaderNotify) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrimaryLeaderNotify: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrimaryLeaderNotify: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromDagRound", wireType)
			}
			m.FromDagRound = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromDagRound |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LeaderAddress = append(m.LeaderAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.LeaderAddress == nil {
				m.LeaderAddress = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryDagHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PrimaryDagHeader{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Message_PrimaryDagHeader{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryDagVote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PrimaryDagVote{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Message_PrimaryDagVote{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryDagCert", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PrimaryDagCert{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Message_PrimaryDagCert{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryParentReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PrimaryParentReq{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Message_PrimaryParentReq{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryParentResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PrimaryParentResp{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Message_PrimaryParentResp{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryLeaderNotify", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PrimaryLeaderNotify{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Message_PrimaryLeaderNotify{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
